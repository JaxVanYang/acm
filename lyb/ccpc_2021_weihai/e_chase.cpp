/* Generated by powerful Codeforces Tool
 * Author: Kenshin2438
 * Time: 2021-11-22 20:46:15
**/

#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

#include <algorithm>
#include <random>
#include <chrono>
#include <iostream>
#include <iomanip>
#include <functional>
#include <bitset>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_map>

#define PII pair<int, int>
#define vec vector
#define str string
#define fi first
#define se second
#define pb push_back
#define all(a) a.begin(), a.end()
using namespace std;

typedef double db;
typedef long long ll;
typedef unsigned long long ull;

const int mod = 1e9 + 7;
const int N = 1e5 + 10;
const int inf = 0x3f3f3f3f;
const ll  INF = 1e18;
const db eps = 1e-4;

int T;

int n, k, q;
db a[N], b[N], ans[N], pre[N];

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  cin >> n >> k >> q;
  for (int i = 1; i <= n; i++) {
    cin >> a[i], b[i] = a[i];
  }
  sort(a + 1, a + 1 + n);
  for (int i = 1; i <= n; i++) {
    pre[i] += pre[i - 1] + a[i];
  }
  db num = (db) n * (n - 1) / 2;
  for (int o = 1; o <= k + 1; o++) {
    db lim = ans[o - 1], sum = 0;
    for (int i = 1; i <= n; i++) {
      // int p = [&](int l, int r) -> int {
      //   int res = i;
      //   while (l <= r) {
      //     int m = (l + r) >> 1;
      //     if (a[m] + a[i] < lim) l = m + 1;
      //     else res = m, r = m - 1;
      //   }
      //   return res;
      // }(1, i - 1);
      int p = lower_bound(a + 1, a + i, lim - a[i]) - a;
      sum += a[i] * (i - p) + (pre[i - 1] - pre[p - 1]) + lim * (p - 1);
    }
    ans[o] = sum / num;
  }
  cout << fixed << setprecision(9) << ans[k + 1] << '\n';
  for (int x, y, c; q--; ) {
    cin >> x >> y >> c;
    if (c == 0) {
      cout << "accept\n"; continue;
    } 
    db be = b[x] + b[y], ed = ans[c];
    if (fabs(be - ed) <= eps) cout << "both\n";
    else if (be < ed) cout << "reselect\n";
    else cout << "accept\n";
  }
  return 0;
}